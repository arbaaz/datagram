require 'bundler'
require 'logger'
require 'yaml'
require 'awesome_print'
require 'bunny'
require 'json'
require 'sequel'
require 'google_drive'
require 'rest-client'
require 'aws/s3'

require './lib/dg_log.rb'
if !defined?(Rails)
  raise "No environment specified" unless ENV["ENV"]
  @logger = Logger.new(STDOUT)
  Rails = OpenStruct.new(logger: @logger, application: OpenStruct.new(secrets: OpenStruct.new(YAML.load(File.read('./config/secrets.yml'))[ENV["ENV"]])))
end
require './config/initializers/rabbitmq.rb'
require './config/initializers/s3.rb'
task :perform  do
  ap "#perform rake started"
  $watches.bind($x, routing_key: "watch-watches").subscribe(block: true) do |di, md, payload|
    Thread.new do
      begin
        t = Time.now.to_i
        payload = JSON.parse(payload)
        context = {datagram: payload["datagram_id"], watch: payload["token"], timestamp: payload["timestamp"]}
        #DgLog.new("#Perform processing watch #{payload["key"]}", context).log
        #ap context
        url = payload["url"]
        if url =~ /docs.google.com\/spreadsheets/
          c = Clients::GoogleDrive.new(url, payload)
          r = c.data
        elsif url =~ /\Ahttp/
          d = payload["params"].slice(*payload["data"].keys) if payload["data"]
          r = JSON.parse(RestClient.get(payload["url"], {params: d}))
        else
          url = url.gsub("mysql://","mysql2://")
          options = url =~ /redshift/ ? {client_min_messages: false, force_standard_strings: false} : {}
          Sequel.connect(url, options) do |db|
            q = payload["data"]["query"]
            r = db.fetch(q).all
          end
        end
        #ap [payload["key"],r, payload["datagram_id"]]
        filename = "#{payload["datagram_id"]}-#{payload["key"]}.json"
        elapsed = (Time.now.to_i - t).round
        Rails.logger.info "#Perform Finished query in #{elapsed} seconds"
        json = JSON.dump(r)
        bytesize = json.bytesize
        if bytesize > 1_000_000
          truncated_json = r[0..20]
        end
        tt = Time.now
        Rails.logger.info "#Perform Storing #{filename} #{tt}"
        x = AWS::S3::S3Object.store(filename,json, "datagramg-cache")
        Rails.logger.info "#Perform Done storing  #{filename} #{(Time.now - tt).round}"

        response = {
          elapsed: elapsed,
          status_code: 200,
          data_filename: filename,
          id: payload["key"],
          datagram_id: payload["datagram_id"],
          timestamp: payload["timestamp"],
          bytesize: bytesize,
          truncated_json: truncated_json
        }
        #ap $watch_responses
        $watch_responses.publish(response.to_json)
        DgLog.new("#Perform finished #{payload["key"]} in #{elapsed} seconds", context).log
      rescue Exception => e
        Rails.logger.error("#Perform #{e.message}")
        ap e.backtrace
        response = {
          elapsed: Time.now.to_i - t,
          status_code: 422,
          data: {},
          error: e.message,
          id: payload["key"],
          datagram_id: payload["datagram_id"]
        }
        $watch_responses.publish(response.to_json)
        Rails.logger.error "#Perform finished #{payload["key"]} in #{elapsed} seconds with error #{e.message}"
      end
    end
  end
end
